!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ArtificialNeuralNetwork	../neural_network.py	/^class ArtificialNeuralNetwork:$/;"	kind:class	line:47
DERIVATIVE	../transfer.py	/^DERIVATIVE = "derivative"$/;"	kind:variable	line:4
Datasets	../dataset.py	/^class Datasets:$/;"	kind:class	line:4
FUNCTION	../transfer.py	/^FUNCTION = "function"$/;"	kind:variable	line:3
MLFFNetwork	../mlp.py	/^class MLFFNetwork(ArtificialNeuralNetwork):$/;"	kind:class	line:7
MLPNetworkTrainer	../mlp.py	/^class MLPNetworkTrainer:$/;"	kind:class	line:73
Neuron	../neural_network.py	/^class Neuron:$/;"	kind:class	line:6
PretrainedMLPNetwork	../mlp.py	/^class PretrainedMLPNetwork(MLFFNetwork):$/;"	kind:class	line:56
TRANSFER_FUNCTIONS	../transfer.py	/^TRANSFER_FUNCTIONS = {$/;"	kind:variable	line:24
__init__	../mlp.py	/^    def __init__(self, network: MLFFNetwork):$/;"	kind:member	line:75
__init__	../mlp.py	/^    def __init__(self, network_json_str):$/;"	kind:member	line:58
__init__	../mlp.py	/^    def __init__(self, num_inputs, num_hidden_layers = 1, $/;"	kind:member	line:12
__init__	../neural_network.py	/^    def __init__(self):$/;"	kind:member	line:52
__init__	../neural_network.py	/^    def __init__(self, num_inputs = None, transfer_function = "logistic",$/;"	kind:member	line:11
activate	../neural_network.py	/^    def activate(self, inputs):$/;"	kind:member	line:28
backprop_error	../neural_network.py	/^    def backprop_error(self, expected_outputs):$/;"	kind:member	line:93
backprop_hidden_layers	../neural_network.py	/^    def backprop_hidden_layers(self):$/;"	kind:member	line:76
backprop_output_layer	../neural_network.py	/^    def backprop_output_layer(self, expected_outputs):$/;"	kind:member	line:65
dataset.py	../dataset.py	1;"	kind:file	line:1
delta	../neural_network.py	/^    delta = None$/;"	kind:variable	line:8
forward	../neural_network.py	/^    def forward(self, inputs):$/;"	kind:member	line:25
forward	../neural_network.py	/^    def forward(self, inputs):$/;"	kind:member	line:55
input_layer	../mlp.py	/^    input_layer = None$/;"	kind:variable	line:9
input_layer	../neural_network.py	/^    input_layer = None$/;"	kind:variable	line:49
json	../neural_network.py	/^    def json(self):$/;"	kind:member	line:125
json	../neural_network.py	/^    def json(self):$/;"	kind:member	line:40
layers	../mlp.py	/^    layers = None$/;"	kind:variable	line:10
layers	../neural_network.py	/^    layers = None$/;"	kind:variable	line:50
linear	../dataset.py	/^    def linear():$/;"	kind:member	line:24
linear	../transfer.py	/^def linear(value):$/;"	kind:function	line:12
linear_deriv	../transfer.py	/^def linear_deriv(value):$/;"	kind:function	line:15
logistic	../transfer.py	/^def logistic(value):$/;"	kind:function	line:6
logistic_deriv	../transfer.py	/^def logistic_deriv(value):$/;"	kind:function	line:9
mlp.py	../mlp.py	1;"	kind:file	line:1
neural_network.py	../neural_network.py	1;"	kind:file	line:1
output	../neural_network.py	/^    output = None$/;"	kind:variable	line:9
random_rosenbrock	../dataset.py	/^    def random_rosenbrock(numx = 2, points = 100, lower_bound = -3, upper_bound = 3):$/;"	kind:member	line:32
rosenbrock	../rosenbrock.py	/^def rosenbrock(*args):$/;"	kind:function	line:1
rosenbrock.py	../rosenbrock.py	1;"	kind:file	line:1
squares	../dataset.py	/^    def squares():$/;"	kind:member	line:16
tanh	../transfer.py	/^def tanh(value):$/;"	kind:function	line:18
tanh_deriv	../transfer.py	/^def tanh_deriv(value):$/;"	kind:function	line:21
train	../mlp.py	/^    def train(self, data, expected_outputs, learning_rate=0.01):$/;"	kind:member	line:40
train_classification	../mlp.py	/^    def train_classification(self, dataset, num_classes, learning_rate = 0.01, num_epochs = 1000):$/;"	kind:member	line:92
train_linear_regression	../mlp.py	/^    def train_linear_regression(self, dataset, num_epochs=1000, learning_rate = 0.1):$/;"	kind:member	line:78
transfer	../neural_network.py	/^    def transfer(self, activation):$/;"	kind:member	line:31
transfer.py	../transfer.py	1;"	kind:file	line:1
transfer_derivative	../neural_network.py	/^    def transfer_derivative(self, value):$/;"	kind:member	line:34
update_weights	../neural_network.py	/^    def update_weights(self, row, learning_rate):$/;"	kind:member	line:104
xor	../dataset.py	/^    def xor():$/;"	kind:member	line:7
